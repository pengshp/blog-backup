<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neal&#39;s Blog!</title>
  
  <subtitle>个人博客，记录点滴!</subtitle>
  <link href="https://blog.crazylinux.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.crazylinux.cc/"/>
  <updated>2020-08-20T07:44:48.357Z</updated>
  <id>https://blog.crazylinux.cc/</id>
  
  <author>
    <name>pengshp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux配置Tinyproxy代理</title>
    <link href="https://blog.crazylinux.cc/post/2020/linux-tinyproxy-config/"/>
    <id>https://blog.crazylinux.cc/post/2020/linux-tinyproxy-config/</id>
    <published>2020-08-20T06:18:32.000Z</published>
    <updated>2020-08-20T07:44:48.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/tinyproxy.png" alt="tinyproxy"></p><p><code>Tinyproxy</code>是一个轻量级的http代理软件，速度快体积小，可以使用来把socks5代理转为http代理。测试环境为 :fire: ​ArchLinux,IP:172.16.10.18,Socks5端口1090.</p><a id="more"></a><h3 id="1-查询软件包"><a href="#1-查询软件包" class="headerlink" title="1.查询软件包"></a>1.查询软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> pacman -Ss tinyproxy</span></span><br><span class="line">community/tinyproxy 1.10.0-2 [已安装]</span><br><span class="line">    A light-weight HTTP proxy daemon for POSIX operating systems.</span><br></pre></td></tr></table></figure><h3 id="2-安装tinyproxy"><a href="#2-安装tinyproxy" class="headerlink" title="2.安装tinyproxy"></a>2.安装tinyproxy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> sudo pacman -Sy tinyproxy</span></span><br></pre></td></tr></table></figure><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> vim /etc/tinyproxy/tinyproxy.conf</span></span><br><span class="line">User tinyproxy</span><br><span class="line">Group tinyproxy</span><br><span class="line"></span><br><span class="line">Port 8888</span><br><span class="line"></span><br><span class="line">Listen 0.0.0.0</span><br><span class="line"></span><br><span class="line">Timeout 600</span><br><span class="line"></span><br><span class="line">ErrorFile 404 &quot;/usr/share/tinyproxy/404.html&quot;</span><br><span class="line">ErrorFile 400 &quot;/usr/share/tinyproxy/400.html&quot;</span><br><span class="line">ErrorFile 503 &quot;/usr/share/tinyproxy/503.html&quot;</span><br><span class="line">ErrorFile 403 &quot;/usr/share/tinyproxy/403.html&quot;</span><br><span class="line"></span><br><span class="line">DefaultErrorFile &quot;/usr/share/tinyproxy/default.html&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StatFile &quot;/usr/share/tinyproxy/stats.html&quot;</span><br><span class="line"></span><br><span class="line">LogFile &quot;/var/log/tinyproxy/tinyproxy.log&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭syslog，使用自定义的日志文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Syslog On</span></span><br><span class="line"></span><br><span class="line">LogLevel Info</span><br><span class="line"></span><br><span class="line">PidFile &quot;/var/run/tinyproxy/tinyproxy.pid&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在请求头中加入客户端IP</span></span><br><span class="line"><span class="meta">#</span><span class="bash">XTinyproxy Yes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置上游代理，转换上游socks5代理为http代理</span></span><br><span class="line">upstream socks5 127.0.0.1:1090</span><br><span class="line"></span><br><span class="line">MaxClients 100</span><br><span class="line"></span><br><span class="line">MinSpareServers 5</span><br><span class="line">MaxSpareServers 20</span><br><span class="line"></span><br><span class="line">StartServers 10</span><br><span class="line"></span><br><span class="line">MaxRequestsPerChild 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许局域网的哪些主机访问</span></span><br><span class="line">Allow 172.16.10.0/24</span><br><span class="line">Allow 192.168.1.0/24</span><br><span class="line"></span><br><span class="line">AddHeader &quot;X-My-Header&quot; &quot;Powered by Tinyproxy&quot;</span><br><span class="line">ViaProxyName &quot;tinyproxy&quot;</span><br></pre></td></tr></table></figure><h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> sudo systemctl start tinyproxy.service</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> tinyproxy.service</span></span><br></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>在局域网内的其它主机上把代理设置为上面的Tinyproxy,测试请求头信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">xdl@aml:~$ export http_proxy=&#x27;http://172.16.10.18:8888&#x27;</span><br><span class="line">xdl@aml:~$ export https_proxy=&#x27;http://172.16.10.18:8888&#x27;</span><br><span class="line"></span><br><span class="line">xdl@aml:~$ curl -I www.baidu.com</span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Via: 1.1 tinyproxy (tinyproxy/1.10.0)   # &lt;------ 请求头中包含了Tinyproxy</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Etag: &quot;575e1f6f-115&quot;</span><br><span class="line">Last-Modified: Mon, 13 Jun 2016 02:50:23 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Thu, 20 Aug 2020 06:57:01 GMT</span><br><span class="line">Content-Length: 277</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>1.<a href="https://tinyproxy.github.io/">https://tinyproxy.github.io/</a></p><p>2.<a href="https://github.com/tinyproxy/tinyproxy">https://github.com/tinyproxy/tinyproxy</a></p><p>3.<a href="https://linux.cn/article-7119-1.html">https://linux.cn/article-7119-1.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/tinyproxy.png&quot; alt=&quot;tinyproxy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tinyproxy&lt;/code&gt;是一个轻量级的http代理软件，速度快体积小，可以使用来把socks5代理转为http代理。测试环境为 :fire: ​ArchLinux,IP:172.16.10.18,Socks5端口1090.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 分布式系统搭建</title>
    <link href="https://blog.crazylinux.cc/post/2020/cephfs-setup/"/>
    <id>https://blog.crazylinux.cc/post/2020/cephfs-setup/</id>
    <published>2020-08-18T09:49:08.000Z</published>
    <updated>2021-01-18T14:22:07.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/ceph-blog.jpg" alt="ceph-blog"></p><p>上一篇介绍了Ceph分布式文件系统，下面介绍Ceph分布式文件系统的安装配置和使用</p><a id="more"></a><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul><li>操作系统：CentOS Linux 7</li><li>node[1-3]添加一块5G的磁盘</li><li>Ceph 版本：nautilus</li></ul><table><thead><tr><th>主机名</th><th>IP地址</th><th>用途</th></tr></thead><tbody><tr><td>admin</td><td>10.10.10.60</td><td>管理节点 安装ceph-deploy</td></tr><tr><td>node1</td><td>10.10.10.61</td><td>mon mgr osd</td></tr><tr><td>node2</td><td>10.10.10.62</td><td>osd</td></tr><tr><td>node3</td><td>10.10.10.63</td><td>osd</td></tr><tr><td>client</td><td>10.10.10.64</td><td>client测试</td></tr></tbody></table><h2 id="2-配置相应的环境"><a href="#2-配置相应的环境" class="headerlink" title="2.配置相应的环境"></a>2.配置相应的环境</h2><blockquote><p>以下操作在所有节点配置</p></blockquote><p>2.1 新建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># all</span></span></span><br><span class="line">[xdl@admin] ~$ sudo useradd -G wheel ceph                        </span><br><span class="line">[xdl@admin] ~$ echo &#x27;ceph&#x27; |sudo passwd --stdin ceph</span><br></pre></td></tr></table></figure><p>2.2 修改hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ceph@admin ~]$ sudo vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ceph</span></span><br><span class="line">10.10.10.60 admin</span><br><span class="line">10.10.10.61 node1</span><br><span class="line">10.10.10.62 node2</span><br><span class="line">10.10.10.63 node3</span><br><span class="line">10.10.10.64 client</span><br></pre></td></tr></table></figure><p>2.3 配置时间同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@admin] ~$ vim /etc/chrony.conf</span><br><span class="line">server ntp.aliyun.com iburst</span><br><span class="line"></span><br><span class="line">[root@admin] ~$ systemctl restart chronyd.service</span><br><span class="line">[root@admin] ~$ chronyc sources -v</span><br></pre></td></tr></table></figure><p>2.4 配置admin节点与各node节点的ssh免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># admin</span></span></span><br><span class="line">[xdl@admin] ~$ su - ceph</span><br><span class="line">[ceph@admin ~]$ ssh-keygen -t rsa -b 1024</span><br><span class="line">[ceph@admin ~]$ ssh-copy-id ceph@node1</span><br><span class="line">[ceph@admin ~]$ ssh-copy-id ceph@node2</span><br><span class="line">[ceph@admin ~]$ ssh-copy-id ceph@node3</span><br></pre></td></tr></table></figure><p>2.5 配置ceph 软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@node1] ~$ vim /etc/yum.repos.d/ceph.repo</span><br><span class="line">[ceph]</span><br><span class="line">name=Ceph packages for $basearch</span><br><span class="line">baseurl=https://mirrors.cloud.tencent.com/ceph/rpm-nautilus/el7/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">priority=2</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.cloud.tencent.com/ceph/keys/release.asc</span><br><span class="line"></span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=Ceph noarch packages</span><br><span class="line">baseurl=https://mirrors.cloud.tencent.com/ceph/rpm-nautilus/el7/noarch</span><br><span class="line">enabled=1</span><br><span class="line">priority=2</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.cloud.tencent.com/ceph/keys/release.asc</span><br><span class="line"></span><br><span class="line">[ceph-source]</span><br><span class="line">name=Ceph source packages</span><br><span class="line">baseurl=https://mirrors.cloud.tencent.com/ceph/rpm-nautilus/el7/SRPMS</span><br><span class="line">enabled=0</span><br><span class="line">priority=2</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.cloud.tencent.com/ceph/keys/release.as</span><br><span class="line"></span><br><span class="line">[root@node1] ~$ yum makecache</span><br></pre></td></tr></table></figure><h1 id="二、安装配置"><a href="#二、安装配置" class="headerlink" title="二、安装配置"></a>二、安装配置</h1><h2 id="admin管理节点配置"><a href="#admin管理节点配置" class="headerlink" title="admin管理节点配置"></a>admin管理节点配置</h2><ol><li>安装ceph-deploy</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@admin] ~$ yum search ceph</span><br><span class="line">[root@admin] ~$ yum install -y ceph-deploy python-setuptools</span><br></pre></td></tr></table></figure><ol start="2"><li>创建节点node1</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@admin] ~$ su - ceph</span><br><span class="line">[ceph@admin ~]$ mkdir cluster</span><br><span class="line">[ceph@admin ~]$ cd cluster/</span><br><span class="line">[ceph@admin cluster]$ ceph-deploy new node1</span><br><span class="line">[ceph@admin cluster]$ ls</span><br><span class="line">ceph.conf  ceph-deploy-ceph.log  ceph.mon.keyring</span><br></pre></td></tr></table></figure><h2 id="node1节点配置"><a href="#node1节点配置" class="headerlink" title="node1节点配置"></a>node1节点配置</h2><ol><li>安装软件包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1] ~$ yum makecache</span><br><span class="line">[root@node1] ~$ yum install -y ceph ceph-radosgw</span><br><span class="line">[root@node1] ~$ ceph --version</span><br><span class="line">ceph version 14.2.16 (762032d6f509d5e7ee7dc008d80fe9c87086603c) nautilus (stable)</span><br></pre></td></tr></table></figure><ol start="2"><li>配置mon 和 mgr</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化mon; admin节点以ceph用户执行</span></span><br><span class="line">[ceph@admin cluster]$ ceph-deploy mon create-initial</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 赋予各个节点使用命令免密码权限</span></span><br><span class="line">[ceph@admin cluster]$ ceph-deploy admin node1 node2 node3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装ceph-mgr,只有luminous源才有，为dashboard做准备</span></span><br><span class="line">[ceph@admin cluster]$ ceph-deploy mgr create node1</span><br></pre></td></tr></table></figure><ol start="3"><li>添加osd</li></ol><p>各个节点提供的存储空间不能太小，最好5G以上, /dev/sdb 是为osd 准备的空闲磁盘（无需格式化）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ceph@admin cluster]$ ceph-deploy osd create --data /dev/sdb node1</span><br><span class="line">[ceph@admin cluster]$ ceph-deploy osd create --data /dev/sdb node2</span><br><span class="line">[ceph@admin cluster]$ ceph-deploy osd create --data /dev/sdb node3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">[ceph@admin cluster]$ ssh node1 lsblk -f</span><br></pre></td></tr></table></figure><ol start="4"><li>查看ceph 的状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@admin cluster]$ ssh node1 sudo ceph -s</span><br></pre></td></tr></table></figure><p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/image-20210118181739086.png" alt="image-20210118181739086"></p><h2 id="Dashboard配置"><a href="#Dashboard配置" class="headerlink" title="Dashboard配置"></a>Dashboard配置</h2><ol><li>创建node1管理密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo ceph auth get-or-create mgr.node1 mon &#x27;allow profile mgr&#x27; osd &#x27;allow *&#x27; mds &#x27;allow *&#x27;</span><br><span class="line">[mgr.node1]</span><br><span class="line">4key = AQB2RAVgLC29BhAABkyYcjDyrjShJ1C9N2hlaQ==</span><br></pre></td></tr></table></figure><ol start="2"><li>开启ceph-mgr 管理域</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo ceph-mgr -i node1</span><br></pre></td></tr></table></figure><ol start="3"><li>查看ceph 的状态，确认mgr 的状态为 active</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo ceph status</span><br></pre></td></tr></table></figure><p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/image-20210118182037802.png" alt="image-20210118182037802"></p><ol start="4"><li>打开 dashboard 模块</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo ceph mgr module enable dashboard</span><br></pre></td></tr></table></figure><ol start="5"><li>绑定开启dashboard 模块的 ceph-mgr 节点的IP地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo ceph config-key set mgr/dashboard/node1/server_addr 10.10.10.61</span><br><span class="line">set mgr/dashboard/node1/server_addr</span><br></pre></td></tr></table></figure><ol start="6"><li>查看监听端口</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ceph@node1 ~]$ sudo netstat -antp |grep 7000</span><br><span class="line">tcp        0      0 10.10.10.61:7000        0.0.0.0:*      LISTEN      12994/ceph-mgr</span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="http://10.10.10.61:7000/">http://10.10.10.61:7000</a> </p><h2 id="客户端的使用"><a href="#客户端的使用" class="headerlink" title="客户端的使用"></a>客户端的使用</h2><p>客户端需要更新内核版本到4.x以上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xdl@client] ~$ uname -r</span><br><span class="line">5.10.8-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><ol><li>安装软件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@client] ~$ yum makecache</span><br><span class="line"></span><br><span class="line">[root@client] ~$ yum install -y python-setuptools</span><br><span class="line"></span><br><span class="line">[root@client] ~$ su - ceph</span><br><span class="line">[ceph@client ~]$ sudo yum install -y ceph ceph-radosgw</span><br><span class="line"></span><br><span class="line">[ceph@client ~]$ ceph --version</span><br><span class="line">ceph version 14.2.16 (762032d6f509d5e7ee7dc008d80fe9c87086603c) nautilus (stable)</span><br></pre></td></tr></table></figure><ol start="2"><li>在admin节点赋予client使用命令免权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@admin cluster]$ ceph-deploy admin client</span><br></pre></td></tr></table></figure><ol start="3"><li> 修改client下该文件呢的读权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ sudo chmod +r /etc/ceph/ceph.client.admin.keyring</span><br></pre></td></tr></table></figure><ol start="4"><li>修改client 的ceph 配置文件，这一步是解决映射镜像时出错问题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ sudo vim /etc/ceph/ceph.conf</span><br><span class="line">[global]</span><br><span class="line">rbd_default_features = 1</span><br></pre></td></tr></table></figure><ol start="5"><li>client 节点创建块设备镜像，单位为MB</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ rbd create foo --size 4096</span><br></pre></td></tr></table></figure><ol start="6"><li>client 节点映射镜像到主机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ sudo rbd map foo --name client.admin</span><br><span class="line">/dev/rbd0</span><br></pre></td></tr></table></figure><ol start="7"><li>client 节点格式化块设备</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ sudo mkfs -t ext4 -m 0 /dev/rbd/rbd/foo</span><br></pre></td></tr></table></figure><ol start="8"><li>client 节点挂载块设备</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ sudo mkdir /mnt/ceph</span><br><span class="line">[ceph@client ~]$ sudo mount /dev/rbd/rbd/foo /mnt/ceph/</span><br><span class="line">[ceph@client ~]$ df -lhT</span><br><span class="line">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/rbd0      ext4      3.9G   16M  3.8G    1% /mnt/ceph</span><br></pre></td></tr></table></figure><p>客户端重启后，设备需要重新做映射（6），不然会卡死</p><ol start="9"><li>测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ceph@client ~]$ cd /mnt/ceph/</span><br><span class="line">[ceph@client ceph]$ sudo touch test.txt</span><br><span class="line">[ceph@client ceph]$ ls</span><br><span class="line">lost+found  test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/ceph-blog.jpg&quot; alt=&quot;ceph-blog&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇介绍了Ceph分布式文件系统，下面介绍Ceph分布式文件系统的安装配置和使用&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ceph 分布式文件系统简介</title>
    <link href="https://blog.crazylinux.cc/post/2020/cephfs-info/"/>
    <id>https://blog.crazylinux.cc/post/2020/cephfs-info/</id>
    <published>2020-08-17T09:48:54.000Z</published>
    <updated>2021-01-18T11:03:23.509Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-ceph-intr.jpg" alt="blog-ceph-intr"></p><p>Ceph 是一种使用广泛的分布式文件系统</p><a id="more"></a><h1 id="存储分类"><a href="#存储分类" class="headerlink" title="存储分类"></a>存储分类</h1><h2 id="本地文件系统"><a href="#本地文件系统" class="headerlink" title="本地文件系统"></a>本地文件系统</h2><p>ntfs(wind)、ext2、ext3、ext4、xfs          </p><p>ext2不带日志，3和4带有日志：文件系统的日志作用（防止机器突然断电）：所有的数据在给磁盘存数据之前会先给文件系统的日志里面存一份，防止机器突然断电之后数据没有存完，这样它还可以从日志里面重新将数据拷贝到磁盘。</p><h2 id="网络文件系统"><a href="#网络文件系统" class="headerlink" title="网络文件系统"></a>网络文件系统</h2><p>nfs           网络文件系统–称之为nas存储（网络附加存储）</p><h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><ul><li><p>hdfs          分布式网络文件系统         </p></li><li><p>glusterfs     分布式网络文件系统，不需要管理服务器         </p></li><li><p>ceph          分布式网络文件系统，块存储，对象存储</p></li></ul><h1 id="分布式文件系统架构"><a href="#分布式文件系统架构" class="headerlink" title="分布式文件系统架构"></a>分布式文件系统架构</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">                          |</span><br><span class="line">                      namenode   </span><br><span class="line">                          |</span><br><span class="line">          ------------------------------------</span><br><span class="line">          |               |                  |</span><br><span class="line">        datanode        datanode            datanode</span><br></pre></td></tr></table></figure><p>namenode 元数据服务器-管理服务器，存储这个文件的数据存放的位置信息</p><p>datanode 存储数据，数据节点</p><h1 id="分布式文件系统的特性"><a href="#分布式文件系统的特性" class="headerlink" title="分布式文件系统的特性"></a>分布式文件系统的特性</h1><ul><li><p>可扩展         </p><p>分布式存储系统可以扩展到几百台甚至几千台的集群规模，而且随着集群规模的增长，系统整体性能表现为线性增长。分布式存储的水平扩展有以下几个特性：           </p><ol><li><p>节点扩展后，旧数据会自动迁移到新节点，实现负载均衡，避免单点故障的情况出现;           </p></li><li><p>水平扩展只需要将新节点和原有集群连接到同一网络，整个过程不会对业务造成影响;          </p></li></ol></li><li><p>低成本         </p><p>分布式存储系统的自动容错、自动负载均衡机制使其可以构建在普通的PC机之上。          </p></li><li><p>易管理         </p><p>可通过一个简单的WEB界面就可以对整个系统进行配置管理，运维简便，极低的管理成本。</p></li></ul><h2 id="块存储的特点："><a href="#块存储的特点：" class="headerlink" title="块存储的特点："></a>块存储的特点：</h2><p>1.主要是将裸磁盘空间映射给主机使用的，共享的最小单位是块     </p><p>2.使用的交换机是光纤交换机价格贵成本高     </p><p>3.性能最好，扩展性好     </p><p>4.不能做文件系统的共享</p><p>最典型的就是SAN（storage area network）(存储区域网)—-有一个局域网里面有一个交换机， 交换机上面连着服务器，所有服务器都是专业存储的设备，他们组成一个存储区域网，当我们用的时候只需要在 这个区域网里面拿空间使用</p><h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><h3 id="为什么需要对象存储？"><a href="#为什么需要对象存储？" class="headerlink" title="为什么需要对象存储？"></a>为什么需要对象存储？</h3><p>首先，一个文件包含了属性（术语叫metadata，元数据，例如该文件的大小、修改时间、存储路径等）以及内容（以下简称数据）。      </p><p>而对象存储则将元数据独立了出来，控制节点叫元数据服务器（服务器+对象存储管理软件），里面主要负责存储对象的属性（主要是对象的数据被打散存放到了那几台分布式服务器中的信息），而其他负责存储数据的分布式服务器叫做OSD，主要负责存储文件的数据部分。当用户访问对象，会先访问元数据服务器，元数据服务器只负责反馈对象存储在哪些OSD，假设反馈文件A存储在B、C、D三台OSD， 那么用户就会再次直接访问3台OSD服务器去读取数据。      </p><p>由于是3台OSD同时对外传输数据，所以传输的速度就加快了。当OSD服务器数量越多，这种读写速度的提升就越大，通过此种方式，实现了读写快的目的。      </p><p>另一方面，对象存储软件是有专门的文件系统的，所以OSD对外又相当于文件服务器，那么就不存在文件共享方面的困难了，也解决了文件共享方面的问题。      </p><p>#所以对象存储的出现，很好地结合了块存储与文件存储的优点。  </p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li><p>具备块存储的读写高速。         </p></li><li><p>具备文件存储的共享等特性。  </p></li></ol><h3 id="使用场景：-适合更新变动较少的数据"><a href="#使用场景：-适合更新变动较少的数据" class="headerlink" title="使用场景： (适合更新变动较少的数据)"></a>使用场景： (适合更新变动较少的数据)</h3><ol><li><p>图片存储。         </p></li><li><p>视频存储。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-ceph-intr.jpg&quot; alt=&quot;blog-ceph-intr&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ceph 是一种使用广泛的分布式文件系统&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>我的 vim 配置文件</title>
    <link href="https://blog.crazylinux.cc/post/2020/my-vimrc-backup/"/>
    <id>https://blog.crazylinux.cc/post/2020/my-vimrc-backup/</id>
    <published>2020-07-18T08:21:51.000Z</published>
    <updated>2020-07-18T09:19:02.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-vim.png" alt="blog-vim"></p><p>我常用到的vim配置文件备份，纯vim配置，不包含任何插件，做一个记录备份，方便多系统迁移使用。</p><a id="more"></a><h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">~<span class="variable">$ </span>sudo yum install -y vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">~<span class="variable">$ </span>sudo apt install -y vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch Linux</span></span><br><span class="line">~<span class="variable">$ </span>sudo pacman -Sy vim</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Debian/Ubuntu 放在<code>/etc/vim/vimrc.local</code>下用于全局配置，对所有用户都生效</p><p>放在<code>~/.vimrc</code>只对当前登录用户生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> vim ~/.vimrc</span></span><br><span class="line">&quot;开启语法高亮</span><br><span class="line">syntax on</span><br><span class="line">&quot; 检测文件类型</span><br><span class="line">filetype on</span><br><span class="line">&quot; 设置在Vim中可以使用鼠标，防止终端无法拷贝</span><br><span class="line">if has(&#x27;mouse&#x27;)</span><br><span class="line">   set mouse-=a</span><br><span class="line">endif</span><br><span class="line">&quot; 显示当前行号和列号</span><br><span class="line">set ruler</span><br><span class="line">&quot; 在状态栏显示正在输入的命令</span><br><span class="line">set showcmd</span><br><span class="line">&quot; 左下角显示当前Vim模式</span><br><span class="line">set showmode</span><br><span class="line">&quot; 括号匹配模式</span><br><span class="line">set showmatch</span><br><span class="line">&quot; 显示行号</span><br><span class="line">set number</span><br><span class="line"></span><br><span class="line">&quot; 设置tab宽度</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 设置自动对齐空格数</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">&quot;设置（软）制表符宽度为4</span><br><span class="line">set softtabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 用space替代tab的输入 </span><br><span class="line">set expandtab</span><br><span class="line"></span><br><span class="line">&quot;不用space替代tab的输入</span><br><span class="line">&quot; set noexpandtab</span><br><span class="line"></span><br><span class="line">&quot; 智能自动缩进</span><br><span class="line">set smartindent</span><br><span class="line"></span><br><span class="line">&quot; 自动对齐</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot; 设置编码方式</span><br><span class="line">set encoding=utf-8</span><br><span class="line"></span><br><span class="line">set helplang=cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set magic</span><br><span class="line">set cursorline</span><br><span class="line"></span><br><span class="line">&quot; 搜索相关</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line"></span><br><span class="line">&quot;不要备份文件</span><br><span class="line">set nobackup</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1.<a href="https://vimjc.com/">vim教程网</a></p><p>2.<a href="https://www.vim.org/">vim官网</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-vim.png&quot; alt=&quot;blog-vim&quot;&gt;&lt;/p&gt;
&lt;p&gt;我常用到的vim配置文件备份，纯vim配置，不包含任何插件，做一个记录备份，方便多系统迁移使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
    <category term="vim" scheme="https://blog.crazylinux.cc/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker buildx 构建多架构镜像</title>
    <link href="https://blog.crazylinux.cc/post/2020/docker-buildx-multi-arch-images/"/>
    <id>https://blog.crazylinux.cc/post/2020/docker-buildx-multi-arch-images/</id>
    <published>2020-07-16T05:38:05.000Z</published>
    <updated>2021-01-04T19:35:51.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-docker-buildx.png" alt="blog-docker-buildx"></p><p>Docker Buildx 是一个 docker CLI 插件，其扩展了 docker 命令，支持 Moby BuildKit 提供的功能。提供了与 docker build 相同的用户体验，并增加了许多新功能。</p><a id="more"></a><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>BuildKit 是下一代的镜像构建组件，主要特点有很多，本文主要使用其可以编译多种系统架构的特性。<br>网址：<a href="https://github.com/moby/buildkit">https://github.com/moby/buildkit</a><br>需要注意的是，该功能仅适用于 Docker v19.03+ 版本。</p><p>本文将讲解如何使用 Buildx 构建多种系统架构的镜像。<br>在开始之前，已经默认你在 Linux 系统（各大发行版）下安装好了 64 位的 Docker，我的测试环境为Linux amd64<code>Ubuntu20.04</code>.</p><h2 id="2-开始实验性功能"><a href="#2-开始实验性功能" class="headerlink" title="2.开始实验性功能"></a>2.开始实验性功能</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;experimental&quot;: true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker使配置生效</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> sudo systemctl restart docker.service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">~$</span><span class="bash"> docker version</span></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.1</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       f001486</span><br><span class="line">  Built:            Tue Dec 15 04:35:42 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     true   # &lt;--------开启成功</span><br></pre></td></tr></table></figure><h2 id="2-安装跨平台编译环境依赖支持"><a href="#2-安装跨平台编译环境依赖支持" class="headerlink" title="2.安装跨平台编译环境依赖支持"></a>2.安装跨平台编译环境依赖支持</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> apt install qemu binfmt-support qemu-user-static</span></span><br></pre></td></tr></table></figure><h2 id="3-安装buildx"><a href="#3-安装buildx" class="headerlink" title="3.安装buildx"></a>3.安装buildx</h2><p>在最新的Docker 20.10.1+ 版本中已默认安装buildx，低于这个版本则手动安装</p><p>下载地址：<a href="https://github.com/docker/buildx/releases/">https://github.com/docker/buildx/releases/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xdl@ubuntu20:~$ mkdir -p ~/.docker/cli-plugins</span><br><span class="line">xdl@ubuntu20:~$ mv buildx-v0.4.1.linux-amd64 .docker/cli-plugins/docker-buildx</span><br><span class="line">xdl@ubuntu20:~$ chmod a+x ~/.docker/cli-plugins/docker-buildx</span><br></pre></td></tr></table></figure><h2 id="4-准备环境"><a href="#4-准备环境" class="headerlink" title="4.准备环境"></a>4.准备环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">xdl@ubuntu20:~$ docker buildx ls</span><br><span class="line">NAME/NODE DRIVER/ENDPOINT STATUS  PLATFORMS</span><br><span class="line">default * docker                  </span><br><span class="line">  default default         running linux/amd64, linux/386</span><br><span class="line">xdl@ubuntu20:~$ docker buildx create --name mybuilder \</span><br><span class="line">444--platform linux/arm,linux/arm64,linux/amd64</span><br><span class="line">mybuilder</span><br><span class="line"></span><br><span class="line">xdl@ubuntu20:~$ docker buildx use mybuilder</span><br><span class="line">xdl@ubuntu20:~$ docker buildx inspect</span><br><span class="line">Name:   mybuilder</span><br><span class="line">Driver: docker-container</span><br><span class="line"></span><br><span class="line">Nodes:</span><br><span class="line">Name:      mybuilder0</span><br><span class="line">Endpoint:  unix:///var/run/docker.sock</span><br><span class="line">Status:    inactive   # &lt;------- 未运行</span><br><span class="line">Platforms: linux/arm/v7*, linux/arm64*, linux/amd64*</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker buildx inspect --bootstrap</span></span><br><span class="line">[+] Building 3.5s (1/1) FINISHED                                                     </span><br><span class="line"> =&gt; [internal] booting buildkit                           3.5s</span><br><span class="line"> =&gt; =&gt; pulling image moby/buildkit:buildx-stable-1        3.2s</span><br><span class="line"> =&gt; =&gt; creating container buildx_buildkit_mybuilder0      0.4s</span><br><span class="line">Name:   mybuilder</span><br><span class="line">Driver: docker-container</span><br><span class="line"></span><br><span class="line">Nodes:</span><br><span class="line">Name:      mybuilder0</span><br><span class="line">Endpoint:  unix:///var/run/docker.sock</span><br><span class="line">Status:    running   # &lt;-------- 运行状态</span><br><span class="line">Platforms: linux/arm/v7*, linux/arm64*, linux/amd64*, linux/386</span><br></pre></td></tr></table></figure><h2 id="5-登录Docker-Hub"><a href="#5-登录Docker-Hub" class="headerlink" title="5.登录Docker Hub"></a>5.登录Docker Hub</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录 DockerHub 便于push images</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> docker login</span></span><br></pre></td></tr></table></figure><h2 id="6-编译示例"><a href="#6-编译示例" class="headerlink" title="6.编译示例"></a>6.编译示例</h2><p>下面使用<code>Trojan</code>源码编译适用多CPU架构的 docker 镜像，系统配置越高编译越开，需要设置科学上网环境或者在国外的VPS上编译。由于我常使用的CPU架构有 <code>armv7,arm64,amd64</code>,其它的可自己添加，我就只编译这三种架构的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载最新Trojan源码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/trojan-gfw/trojan/archive/v1.16.0.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip *.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> trojan</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入自定义的设置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker buildx build --platform linux/arm,linux/arm64,linux/amd64 \</span></span><br><span class="line"><span class="bash">                      -t pengshp/trojan:v1.16 . --push</span></span><br></pre></td></tr></table></figure><blockquote><p>–platform  指定要编译的CPU架构</p><p>–push 编译完后上传到 Docker Hub</p></blockquote><p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/image-20200716162421820.png" alt="image-20200716162421820"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1.<a href="https://teddysun.com/581.html">使用 Docker Buildx 构建多种系统架构镜像</a></p><p>2.<a href="https://github.com/docker/buildx/">Github buildx</a></p><p>3.<a href="https://docs.docker.com/buildx/working-with-buildx/">Docker buildx</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-docker-buildx.png&quot; alt=&quot;blog-docker-buildx&quot;&gt;&lt;/p&gt;
&lt;p&gt;Docker Buildx 是一个 docker CLI 插件，其扩展了 docker 命令，支持 Moby BuildKit 提供的功能。提供了与 docker build 相同的用户体验，并增加了许多新功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://blog.crazylinux.cc/categories/docker/"/>
    
    
    <category term="Docker" scheme="https://blog.crazylinux.cc/tags/docker/"/>
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux VPS 开启 bbr 加速和fastopen</title>
    <link href="https://blog.crazylinux.cc/post/2020/linux-bbr-speed/"/>
    <id>https://blog.crazylinux.cc/post/2020/linux-bbr-speed/</id>
    <published>2020-07-16T04:36:45.000Z</published>
    <updated>2020-07-16T13:30:15.182Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-linux-bbr.png" alt="blog-linux-bbr"></p><p>TCP BBR 是由 Google 设计，于2016年发布的拥塞算法，可以降低 TCP 握手的延迟时间，加快 VPS 代理的速度，本文介绍如何在 VPS上开启 bbr,并打开<code>tcp_fastopen</code></p><a id="more"></a><h2 id="1-bbr简介"><a href="#1-bbr简介" class="headerlink" title="1.bbr简介"></a>1.bbr简介</h2><p>TCP BBR（Bottleneck Bandwidth and Round-trip propagation time）是由Google设计，于2016年发布的拥塞算法。以往大部分拥塞算法是基于丢包来作为降低传输速率的信号，而BBR则基于模型主动探测。该算法使用网络最近出站数据分组当时的最大带宽和往返时间来创建网络的显式模型。数据包传输的每个累积或选择性确认用于生成记录在数据包传输过程和确认返回期间的时间内所传送数据量的采样率。该算法认为随着网络接口控制器逐渐进入千兆速度时，分组丢失不应该被认为是识别拥塞的主要决定因素，所以基于模型的拥塞控制算法能有更高的吞吐量和更低的延迟，可以用BBR来替代其他流行的拥塞算法，例如CUBIC。Google在YouTube上应用该算法，将全球平均的YouTube网络吞吐量提高了4%，在一些国家超过了14%。</p><p>BBR之后移植入Linux内核4.9版本，并且对于QUIC可用。</p><p>BBR 目的是要尽量跑满带宽，并且尽量不要有排队的情况，效果并不比速锐差。</p><p>Linux kernel 4.9+ 已支持 tcp_bbr。下面简单讲述基于 KVM 架构 VPS 如何开启。</p><h2 id="2-查看Linux内核版本"><a href="#2-查看Linux内核版本" class="headerlink" title="2.查看Linux内核版本"></a>2.查看Linux内核版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ uname -r</span><br><span class="line">5.2.2-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><h2 id="3-开启bbr加速"><a href="#3-开启bbr加速" class="headerlink" title="3.开启bbr加速"></a>3.开启bbr加速</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ sudo vim /etc/sysctl.conf</span><br><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br></pre></td></tr></table></figure><h2 id="4-重新加载配置"><a href="#4-重新加载配置" class="headerlink" title="4.重新加载配置"></a>4.重新加载配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ sudo sysctl -p</span><br><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br></pre></td></tr></table></figure><h2 id="5-测试是否生效"><a href="#5-测试是否生效" class="headerlink" title="5.测试是否生效"></a>5.测试是否生效</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  246</span><br></pre></td></tr></table></figure><h2 id="6-检查tcp-fastopen"><a href="#6-检查tcp-fastopen" class="headerlink" title="6.检查tcp_fastopen"></a>6.检查tcp_fastopen</h2><p>TCP fast open 集成到了Linux kernel3.7,并且在3.13的内核中默认开启，使用<code>uname -r</code>可查看当前系统的内核版本。或者使用下面的命令检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ cat /proc/sys/net/ipv4/tcp_fastopen</span><br><span class="line">1</span><br></pre></td></tr></table></figure><blockquote><p>It can return 4 values.</p><ul><li>0 means disabled.</li><li>1 means it’s enabled for outgoing connection (as a client).</li><li>2 means it’s enabled for incoming connection (as a server).</li><li>3 means it’s enabled for both outgoing and incoming connection.</li></ul></blockquote><h2 id="7-开启fast-open"><a href="#7-开启fast-open" class="headerlink" title="7.开启fast open"></a>7.开启fast open</h2><p>由于我们的VPS 是作为server 使用，可以设置为3，对流入和流出的流量都生效。在LAN客户端可以使用默认1便可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[xdl@vultr ~]$ sudo vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.tcp_fastopen=3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载配置</span></span><br><span class="line">[xdl@vultr ~]$ sudo sysctl -f /etc/sysctl.conf</span><br><span class="line">net.core.default_qdisc=fq</span><br><span class="line">net.ipv4.tcp_congestion_control=bbr</span><br><span class="line">net.ipv4.tcp_fastopen=3</span><br></pre></td></tr></table></figure><p>如果系统内核低的可以使用下面链接的一键开启bbr加速脚本，也会安装最新你的内核。支持CentOS6+，Debian8+，Ubuntu16+</p><p>参考链接</p><ol><li><p><a href="https://www.linuxbabe.com/debian/install-shadowsocks-libev-proxy-server-debian-10">How to Install Shadowsocks-Libev Proxy Server on Debian 10 VPS</a></p></li><li><p><a href="https://teddysun.com/489.html">一键安装最新内核并开启 BBR 脚本</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-linux-bbr.png&quot; alt=&quot;blog-linux-bbr&quot;&gt;&lt;/p&gt;
&lt;p&gt;TCP BBR 是由 Google 设计，于2016年发布的拥塞算法，可以降低 TCP 握手的延迟时间，加快 VPS 代理的速度，本文介绍如何在 VPS上开启 bbr,并打开&lt;code&gt;tcp_fastopen&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
    <category term="VPS" scheme="https://blog.crazylinux.cc/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>使用 OpenSSL 自签名 TLS/SSL 证书</title>
    <link href="https://blog.crazylinux.cc/post/2020/openssl-https/"/>
    <id>https://blog.crazylinux.cc/post/2020/openssl-https/</id>
    <published>2020-07-15T06:20:44.000Z</published>
    <updated>2021-01-19T04:20:58.024Z</updated>
    
    <content type="html"><![CDATA[<p>有时需要一个本地的自签名证书，便于本地的加密https 访问，或者用于开发和测试，OpenSSL 便可以方便自签名一个证书，下面介绍使用方法。</p><a id="more"></a><h3 id="证书的工作原理"><a href="#证书的工作原理" class="headerlink" title="证书的工作原理"></a>证书的工作原理</h3><p>你使用自己的证书请求文件 <code>server.csr</code>向证书签发机构CA如：Verisign、GoDaddy 请求证书，证书签发机构使用它们的root根证书和私钥根据你提供的证书请求文件签发你需要的证书<code>server.crt</code>,所有的浏览器或者操作系统中都有一份证书签发机构的root根证书拷贝，当访问你的证书签发的域名时，会使用签发机构的root证书验证你的域名对应证书的有效性。</p><p>自签名TLS/SSL证书过程：OpenSSL 生成一个私钥server.key，使用私钥生成证书请求文件server.csr,再使用server.key 和 server.csr 生成证书文件server.crt</p><h2 id="1、安装OpenSSL"><a href="#1、安装OpenSSL" class="headerlink" title="1、安装OpenSSL"></a>1、安装OpenSSL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Debian</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> sudo apt install -y openssl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> sudo yum install -y openssl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> openssl version</span></span><br><span class="line">OpenSSL 1.1.1g  21 Apr 2020</span><br></pre></td></tr></table></figure><h2 id="2、生成CSR证书请求文件和私钥"><a href="#2、生成CSR证书请求文件和私钥" class="headerlink" title="2、生成CSR证书请求文件和私钥"></a>2、生成CSR证书请求文件和私钥</h2><p>使用秋水逸冰大佬制作的网站在线生成,点击  <a href="https://www.csr.sh/">https://www.csr.sh/</a></p><p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/image-20200715143203262.png" alt="image-csr"></p><p>域名可以填写泛域名，这样可以匹配<code>www.alarmpi.lan</code>,<code>dl.alarmpi.lan</code></p><p>点击生成CSR，复制出来用编辑器打开，分两部分，上半部分为证书的请求文件，下半部分为私钥，分别保存为<code>server.csr</code>,<code>server.key</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">openssl$</span><span class="bash"> ls</span></span><br><span class="line">server.csr  server.key</span><br></pre></td></tr></table></figure><h2 id="3、使用OpenSSL生成服务证书"><a href="#3、使用OpenSSL生成服务证书" class="headerlink" title="3、使用OpenSSL生成服务证书"></a>3、使用OpenSSL生成服务证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=C = CN, CN = *.alarmpi.lan, L = Guangzhou, O = RaspberryPi, ST = Guangdong, OU = IT</span><br><span class="line">Getting Private key</span><br><span class="line"></span><br><span class="line"><span class="meta">~$</span><span class="bash"> $ ls</span></span><br><span class="line">server.crt  server.csr  server.key</span><br></pre></td></tr></table></figure><p><code>-days</code>指定证书的有效期，这个证书的有效期为10年。</p><h2 id="4、验证证书的有效性"><a href="#4、验证证书的有效性" class="headerlink" title="4、验证证书的有效性"></a>4、验证证书的有效性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> openssl verify server.crt</span></span><br></pre></td></tr></table></figure><p>如果要你的浏览器或操作系统信任你的自签名证书，即访问时不再有警告提示，需要你把用于签发证书的root根证书导入到浏览器或者操作系统的<code>受信任的证书签发机构</code>域。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1、<a href="https://dev.to/techschoolguru/how-to-create-sign-ssl-tls-certificates-2aai">How to create &amp; sign SSL/TLS certificates</a></p><p>2、<a href="https://www.freecodecamp.org/news/openssl-command-cheatsheet-b441be1e8c4a/">OpenSSL command cheatsheet</a></p><p>3、<a href="https://github.com/FiloSottile/mkcert">生成证书的命令行工具</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时需要一个本地的自签名证书，便于本地的加密https 访问，或者用于开发和测试，OpenSSL 便可以方便自签名一个证书，下面介绍使用方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 防火墙 firewalld 的管理</title>
    <link href="https://blog.crazylinux.cc/post/2019/centos-firewall-manage/"/>
    <id>https://blog.crazylinux.cc/post/2019/centos-firewall-manage/</id>
    <published>2019-05-18T12:59:06.000Z</published>
    <updated>2021-01-08T04:51:22.486Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://t1.picb.cc/uploads/2019/05/18/gZeYlJ.png" alt="gZeYlJ.png"></p><p>CentOS7.x 使用firewalld 防火墙替代了 CentOS6.x 中的 iptables,两者的使用上有较大的区别，本文介绍firewall在日常的使用和管理中常使用的一些基本命令。</p><a id="more"></a><h3 id="一、firewall基本管理"><a href="#一、firewall基本管理" class="headerlink" title="一、firewall基本管理"></a>一、firewall基本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙服务</span></span><br><span class="line">$ sudo systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">$ sudo systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开机自启</span></span><br><span class="line">$ sudo systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h3 id="二、firewall-cmd"><a href="#二、firewall-cmd" class="headerlink" title="二、firewall-cmd"></a>二、firewall-cmd</h3><h4 id="1、查看状态"><a href="#1、查看状态" class="headerlink" title="1、查看状态"></a>1、查看状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --state</span><br><span class="line"><span class="comment"># running表示运行</span></span><br></pre></td></tr></table></figure><h4 id="2、获取活动的区域"><a href="#2、获取活动的区域" class="headerlink" title="2、获取活动的区域"></a>2、获取活动的区域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure><h4 id="3、获取所有支持的服务"><a href="#3、获取所有支持的服务" class="headerlink" title="3、获取所有支持的服务"></a>3、获取所有支持的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-service</span><br></pre></td></tr></table></figure><h4 id="4、开放某个服务"><a href="#4、开放某个服务" class="headerlink" title="4、开放某个服务"></a>4、开放某个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时，重启后失效</span></span><br><span class="line">$ firewall-cmd --zone=public --add-service=https</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载防火墙使生效</span></span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="5、开放某个端口"><a href="#5、开放某个端口" class="headerlink" title="5、开放某个端口"></a>5、开放某个端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时</span></span><br><span class="line">$ firewall-cmd --zone=public --add-port=8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久</span></span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载防火墙使生效</span></span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="6、查看开启的服务和端口"><a href="#6、查看开启的服务和端口" class="headerlink" title="6、查看开启的服务和端口"></a>6、查看开启的服务和端口</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启的服务</span></span><br><span class="line">$ firewall-cmd <span class="params">--permanent</span> <span class="params">--zone=public</span> <span class="params">--list-services</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启的端口</span></span><br><span class="line">$ firewall-cmd <span class="params">--permanent</span> <span class="params">--zone=public</span> <span class="params">--list-ports</span></span><br></pre></td></tr></table></figure><h4 id="7、查询服务的启用状态"><a href="#7、查询服务的启用状态" class="headerlink" title="7、查询服务的启用状态"></a>7、查询服务的启用状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd ---query-service http</span><br></pre></td></tr></table></figure><p>常用的命令如上所示，基本能够满足日常管理和使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://t1.picb.cc/uploads/2019/05/18/gZeYlJ.png&quot; alt=&quot;gZeYlJ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;CentOS7.x 使用firewalld 防火墙替代了 CentOS6.x 中的 iptables,两者的使用上有较大的区别，本文介绍firewall在日常的使用和管理中常使用的一些基本命令。&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/categories/centos/"/>
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>使用mosquitto设置一个MQTT服务</title>
    <link href="https://blog.crazylinux.cc/post/2019/setup-mqtt-server/"/>
    <id>https://blog.crazylinux.cc/post/2019/setup-mqtt-server/</id>
    <published>2019-05-16T14:51:04.000Z</published>
    <updated>2020-07-16T13:30:15.471Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://t1.picb.cc/uploads/2019/05/16/gtpNnc.md.png" alt="gtpNnc.md.png"></p><p>MQTT 是一种基于 pusblish/subscribe(发布/订阅)的消息通信协议，适用于 M2M (machine to machine)在低带宽条件下进行消息通信。广泛运用于物联网(IoT)领域。本文介绍使用 mosquitto 搭建一个 MQTT Broker。</p><a id="more"></a><h3 id="1、下载安装mosquito"><a href="#1、下载安装mosquito" class="headerlink" title="1、下载安装mosquito"></a>1、下载安装mosquito</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y mosquitto</span><br></pre></td></tr></table></figure><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mosquitto/mosquitto.conf</span><br><span class="line">pid_file /var/run/mosquitto.pid</span><br><span class="line"></span><br><span class="line">persistence <span class="literal">true</span></span><br><span class="line">persistence_location /var/lib/mosquitto/</span><br><span class="line"></span><br><span class="line">log_dest file /var/<span class="built_in">log</span>/mosquitto/mosquitto.log</span><br><span class="line"></span><br><span class="line">include_dir /etc/mosquitto/conf.d</span><br><span class="line"></span><br><span class="line">bind_address 172.16.10.80 <span class="comment"># 绑定的IP地址</span></span><br><span class="line"></span><br><span class="line">allow_anonymous <span class="literal">false</span> <span class="comment"># 禁止匿名登录</span></span><br><span class="line">protocol mqtt</span><br><span class="line">password_file /etc/mosquitto/pwfile  <span class="comment">#密码文件</span></span><br><span class="line">port 1883  <span class="comment"># 监听的端口号</span></span><br><span class="line"></span><br><span class="line">max_connections 100 <span class="comment"># 最大连接数</span></span><br></pre></td></tr></table></figure><h3 id="3、设置密码"><a href="#3、设置密码" class="headerlink" title="3、设置密码"></a>3、设置密码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为用户mqtt设置一个密码</span></span><br><span class="line">$ mosquitto_passwd -c /etc/mosquitto/pwfile mqtt</span><br></pre></td></tr></table></figure><h3 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start mosquitto.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> mosquitto.service</span><br></pre></td></tr></table></figure><h3 id="5、测试服务"><a href="#5、测试服务" class="headerlink" title="5、测试服务"></a>5、测试服务</h3><h4 id="订阅端"><a href="#订阅端" class="headerlink" title="订阅端"></a>订阅端</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mosquitto_sub -h 172.16.10.80 -d -u mqtt -P hello -t mqtt/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="发布端"><a href="#发布端" class="headerlink" title="发布端"></a>发布端</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mosquitto_pub -h 172.16.10.80 -d -u mqtt -P hello -t mqtt/<span class="built_in">test</span> -m <span class="string">&quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>-h    指定MQTT的IP</p><p>-d    打开调试模式</p><p>-u    指定用户名</p><p>-P    指定密码</p><p>-t     指定主题Topic</p><p>-m   指定消息内容</p></blockquote><p>一端从 MQTT Broker 订阅一个主题，另一端向 MQTT Broker 发布主题，发布后订阅端便可以收到发布端发布的消息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://t1.picb.cc/uploads/2019/05/16/gtpNnc.md.png&quot; alt=&quot;gtpNnc.md.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;MQTT 是一种基于 pusblish/subscribe(发布/订阅)的消息通信协议，适用于 M2M (machine to machine)在低带宽条件下进行消息通信。广泛运用于物联网(IoT)领域。本文介绍使用 mosquitto 搭建一个 MQTT Broker。&lt;/p&gt;</summary>
    
    
    
    <category term="IoT" scheme="https://blog.crazylinux.cc/categories/iot/"/>
    
    
    <category term="IoT" scheme="https://blog.crazylinux.cc/tags/iot/"/>
    
  </entry>
  
  <entry>
    <title>CentOS设置Fail2ban防SSH暴力破解</title>
    <link href="https://blog.crazylinux.cc/post/2019/setup-fail2ban/"/>
    <id>https://blog.crazylinux.cc/post/2019/setup-fail2ban/</id>
    <published>2019-05-16T10:45:14.000Z</published>
    <updated>2020-07-16T13:30:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://t1.picb.cc/uploads/2019/05/16/gtjqsr.png" alt="gtjqsr.png"><br>今天查看我的滴滴云服务器的时候，云监控里发现最近两天有两百多次的SSH暴力破解登录，查了下来源IP，都是韩国釜山，安徽什么的。真是防不胜防啊！于是决定研究下SSH的防暴力破解，我选择的程序是<code>Fail2ban</code>。下面介绍如何配置使用。</p><a id="more"></a><h3 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h3><p><code>Fail2ban</code>安装包在<code>epel</code>源里，如果没安装，需要装上。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y epel-release</span><br><span class="line">$ sudo yum install -y fail2ban fail2ban-systemd</span><br></pre></td></tr></table></figure><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><p>主配置文件<code>/etc/fail2ban/jail.conf</code>不建议修改，自行建一个配置文件,它会覆盖主配置文件的配置项，这样便于管理，升级安装包时也不会被覆盖。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/fail2ban/jail.d/ssh.local</span><br><span class="line">[DEFAULT]</span><br><span class="line"><span class="comment"># 禁止一个IP24小时</span></span><br><span class="line">bantime = 86400</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10分钟内尝试登陆5次失败便加入屏蔽列表</span></span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 覆写 /etc/fail2ban/jail.d/00-firewalld.conf:</span></span><br><span class="line">banaction = firewallcmd-ipset</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">filter = sshd</span><br><span class="line">port = 22</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line">logpath = /var/<span class="built_in">log</span>/secure</span><br></pre></td></tr></table></figure><h3 id="3、启动Fail2ban服务"><a href="#3、启动Fail2ban服务" class="headerlink" title="3、启动Fail2ban服务"></a>3、启动Fail2ban服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start fail2ban.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> fail2ban.service</span><br></pre></td></tr></table></figure><h3 id="4、查看ssh状态"><a href="#4、查看ssh状态" class="headerlink" title="4、查看ssh状态"></a>4、查看<code>ssh</code>状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-client status sshd</span><br><span class="line">Status <span class="keyword">for</span> the jail: sshd</span><br><span class="line">|- Filter</span><br><span class="line">|  |- Currently failed: 0</span><br><span class="line">|  |- Total failed:     0</span><br><span class="line">|  `- Journal matches:  _SYSTEMD_UNIT=sshd.service + _COMM=sshd</span><br><span class="line">`- Actions</span><br><span class="line">   |- Currently banned: 20</span><br><span class="line">   |- Total banned:     20</span><br><span class="line">   `- Banned IP list:   1.252.24.138 142.93.153.234 157.230.9.239 \</span><br><span class="line">   159.65.145.175 159.65.148.178 159.65.151.151 165.227.39.62 \</span><br><span class="line">   183.157.142.164 183.230.146.26 192.99.255.47 193.201.224.214 \</span><br><span class="line">   195.231.4.214 198.98.56.196 198.98.62.146 206.189.132.42 \</span><br><span class="line">   209.141.35.22 223.113.91.54 24.90.25.51 59.20.205.178 68.183.99.64</span><br></pre></td></tr></table></figure><h3 id="5、查看实时日志"><a href="#5、查看实时日志" class="headerlink" title="5、查看实时日志"></a>5、查看实时日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tail -f /var/<span class="built_in">log</span>/fail2ban.log</span><br></pre></td></tr></table></figure><h3 id="6、最近一个启动fail2ban日志"><a href="#6、最近一个启动fail2ban日志" class="headerlink" title="6、最近一个启动fail2ban日志"></a>6、最近一个启动<code>fail2ban</code>日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -b -u fail2ban</span><br></pre></td></tr></table></figure><h3 id="7、查看登录失败的日志"><a href="#7、查看登录失败的日志" class="headerlink" title="7、查看登录失败的日志"></a>7、查看登录失败的日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat /var/<span class="built_in">log</span>/secure |grep <span class="string">&#x27;Failed password&#x27;</span></span><br><span class="line">May 16 20:42:55 10-255-0-83 sshd[21804]: Failed password <span class="keyword">for</span> root from 185.244.25.105 port 35412 ssh2</span><br><span class="line">May 16 21:08:06 10-255-0-83 sshd[25255]: Failed password <span class="keyword">for</span> root from 40.73.39.211 port 41718 ssh2</span><br><span class="line">May 16 21:13:51 10-255-0-83 sshd[25935]: Failed password <span class="keyword">for</span> root from 105.103.132.251 port 19628 ssh2</span><br></pre></td></tr></table></figure><h3 id="8、解锁IP"><a href="#8、解锁IP" class="headerlink" title="8、解锁IP"></a>8、解锁IP</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fail2ban-client <span class="built_in">set</span> sshd unbanip IP</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://t1.picb.cc/uploads/2019/05/16/gtjqsr.png&quot; alt=&quot;gtjqsr.png&quot;&gt;&lt;br&gt;今天查看我的滴滴云服务器的时候，云监控里发现最近两天有两百多次的SSH暴力破解登录，查了下来源IP，都是韩国釜山，安徽什么的。真是防不胜防啊！于是决定研究下SSH的防暴力破解，我选择的程序是&lt;code&gt;Fail2ban&lt;/code&gt;。下面介绍如何配置使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python3爬虫百度翻译查词</title>
    <link href="https://blog.crazylinux.cc/post/2018/py-spider-bdfanyi/"/>
    <id>https://blog.crazylinux.cc/post/2018/py-spider-bdfanyi/</id>
    <published>2018-10-20T10:53:36.000Z</published>
    <updated>2020-07-16T13:30:15.286Z</updated>
    
    <content type="html"><![CDATA[<p>百度翻译是一个不错的查词翻译网站，本文介绍使用Python3爬虫实现百度翻译查词的效果，主要的依赖是<code>requests</code>库。</p><a id="more"></a><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>Windows10 x64</li><li>PyCharm 2018.2</li><li>Python3.6.4</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>requests<br>请求的API：<a href="https://fanyi.baidu.com/sug">https://fanyi.baidu.com/sug</a></li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span></span><br><span class="line"><span class="comment">#   @File Name:    bdfy.py</span></span><br><span class="line"><span class="comment">#   @Description:  百度翻译</span></span><br><span class="line"><span class="comment">#   @Author:       pengshp&lt;pengshp3@outlook.com&gt;</span></span><br><span class="line"><span class="comment">#   @date:         2018/10/14 0014</span></span><br><span class="line"><span class="comment"># &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baiduFanyi</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;百度翻译单词查询&quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, headers=header, data=data)</span><br><span class="line">    resData = response.json()  <span class="comment"># 把返回的json数据转为字典</span></span><br><span class="line">    result = resData[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>].get(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要查询的单词：&#x27;</span>)</span><br><span class="line">    print(baiduFanyi(word))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要是使用requests库的<code>post</code>请求方法请求百度翻译的<code>API</code>，把返回的<code>json</code>数据转为字典，再提取数据。</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ python3 bdfy.py</span><br><span class="line">请输入你要查询的单词：python</span><br><span class="line">n. 巨蛇，大蟒;</span><br></pre></td></tr></table></figure><h3 id="使用Google-Fire封装为CLi"><a href="#使用Google-Fire封装为CLi" class="headerlink" title="使用Google Fire封装为CLi"></a>使用<code>Google Fire</code>封装为<code>CLi</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Version: v1.0</span></span><br><span class="line"><span class="comment"># @Author: pengshp&lt;pengshp3@outlook.com&gt;</span></span><br><span class="line"><span class="comment"># @License: Apache Licence 2.0</span></span><br><span class="line"><span class="comment"># @Description: 百度翻译API</span></span><br><span class="line"><span class="comment"># @File: bdfy.py</span></span><br><span class="line"><span class="comment"># @Date: 10月 26,2018</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baiduFanyi</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;百度翻译单词查询&quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, headers=header, data=data)</span><br><span class="line">    resData = response.json()  <span class="comment"># 把返回的json数据转为字典</span></span><br><span class="line">    result = resData[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>].get(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fire.Fire(baiduFanyi)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> F:\code\myfire&gt; pipenv run python bdfy.py -- -<span class="literal">-help</span></span><br><span class="line"><span class="built_in">Type</span>:        function</span><br><span class="line">String form: &lt;<span class="function"><span class="keyword">function</span> <span class="title">baiduFanyi</span> <span class="title">at</span> <span class="title">0x000001A023011E18</span>&gt;</span></span><br><span class="line">File:        bdfy.py</span><br><span class="line">Line:        <span class="number">15</span></span><br><span class="line">Docstring:   百度翻译单词查询</span><br><span class="line"></span><br><span class="line">Usage:       bdfy.py WORD</span><br><span class="line">             bdfy.py -<span class="literal">-word</span> WORD</span><br><span class="line"><span class="built_in">PS</span> F:\code\myfire&gt; pipenv run python bdfy.py python</span><br><span class="line">n. 巨蛇，大蟒;</span><br><span class="line"><span class="built_in">PS</span> F:\code\myfire&gt; pipenv run python bdfy.py 你好</span><br><span class="line">[<span class="type">n</span>ǐ <span class="type">h</span>ǎ<span class="type">o</span>] hello; hi; How <span class="keyword">do</span> you <span class="keyword">do</span>!;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://fanyi.baidu.com/">百度翻译</a><br>2、<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html">requests中文指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;百度翻译是一个不错的查词翻译网站，本文介绍使用Python3爬虫实现百度翻译查词的效果，主要的依赖是&lt;code&gt;requests&lt;/code&gt;库。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>爬取虎扑网步行街帖子信息并写入CSV文件</title>
    <link href="https://blog.crazylinux.cc/post/2018/spider-hupubxj-csv/"/>
    <id>https://blog.crazylinux.cc/post/2018/spider-hupubxj-csv/</id>
    <published>2018-10-19T09:56:13.000Z</published>
    <updated>2020-07-16T13:30:15.493Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学Python网络爬虫，自己写了一些小项目，本次介绍使用requests和BeautifulSoup4库爬取虎扑网的帖子信息并写入到CSV文件。</p><a id="more"></a><p><a href="https://bbs.hupu.com/bxj">虎扑步行街</a>的帖子很有意思，记得大学舍友经常看，遇到有意思的会和我们讲，本次爬取步行街帖子的<em>标题，URL，作者，发帖时间，回帖数，浏览数，最后回帖时间，最后回帖人</em>信息并写入到CSV文件。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Python 3.6.4</li><li>PyCharm 2018</li><li>Windows10 x64</li></ul><h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><ul><li>requests == 2.19.1</li><li>beautifulsoup4 == 4.6.3</li><li>lxml == 4.2.4</li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span></span><br><span class="line"><span class="comment">#   @Version: v1.0</span></span><br><span class="line"><span class="comment">#   @License: Apache Licence 2.0</span></span><br><span class="line"><span class="comment">#   @File Name: hupubxj.py</span></span><br><span class="line"><span class="comment">#   @Description: 爬取虎扑步行街的帖子信息并写入csv文件</span></span><br><span class="line"><span class="comment">#   @Author: pengshp &lt;pengshp3@outlook.com&gt;</span></span><br><span class="line"><span class="comment">#   @Date: 2018/10/19 0019</span></span><br><span class="line"><span class="comment"># &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTML</span>(<span class="params">link</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取网站HTML&quot;&quot;&quot;</span></span><br><span class="line">    kv = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(link, headers=kv)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        html = r.text</span><br><span class="line">    <span class="keyword">except</span> requests.HTTPError:</span><br><span class="line">        print(<span class="string">&quot;爬取异常&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">html</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取帖子的详细信息&quot;&quot;&quot;</span></span><br><span class="line">    data_list = []</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    ul = soup.find_all(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&quot;for-list&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ul[<span class="number">0</span>].children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(li, bs4.element.Tag):</span><br><span class="line">            title_box = li.select(<span class="string">&#x27;a[class=&quot;truetit&quot;]&#x27;</span>)</span><br><span class="line">            title = title_box[<span class="number">0</span>].string</span><br><span class="line">            url = <span class="string">&#x27;https://bbs.hupu.com%s&#x27;</span> % title_box[<span class="number">0</span>][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            author = li.select(<span class="string">&#x27;a[class=&quot;aulink&quot;]&#x27;</span>)[<span class="number">0</span>].string</span><br><span class="line">            time = li.select(<span class="string">&#x27;a[style=&quot;color:#808080;cursor: initial; &quot;]&#x27;</span>)[<span class="number">0</span>].string</span><br><span class="line">            relay_view = li.select(<span class="string">&#x27;span[class=&quot;ansour box&quot;]&#x27;</span>)[<span class="number">0</span>].string</span><br><span class="line">            relay = relay_view.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            view = relay_view.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">            endreply = li.select(<span class="string">&#x27;div[class=&quot;endreply box&quot;]&#x27;</span>)[<span class="number">0</span>].a.string</span><br><span class="line">            endauthor = li.select(<span class="string">&#x27;div[class=&quot;endreply box&quot;]&#x27;</span>)[<span class="number">0</span>].span.string</span><br><span class="line">            data_list.append([title, url, author, time,</span><br><span class="line">                              relay, view, endreply, endauthor])</span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    link = <span class="string">&#x27;https://bbs.hupu.com/bxj&#x27;</span></span><br><span class="line">    page = getHTML(link)</span><br><span class="line">    datas = getData(page)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bxj.csv&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            w = csv.writer(f)</span><br><span class="line">            w.writerow(data)</span><br><span class="line">    print(<span class="string">&quot;数据写入完成！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>先使用<code>requests</code>库获取网页的<code>HTML</code>，再使用<code>bs4</code>库解析网页中的数据，这里是难点，需要对照源码找到对应的标签，并提取所需的信息,把单个帖子所有的信息存为一个<code>List</code>，再把每个List加入到总的数据List中，相当于一个二维数组。写数据时一个帖子的所有信息作为一行写入<code>bxj.csv</code>.</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>打开<code>bxj.csv</code>查看数据。<br><img src="/images/bxj.png" alt="bxjdata"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在学Python网络爬虫，自己写了一些小项目，本次介绍使用requests和BeautifulSoup4库爬取虎扑网的帖子信息并写入到CSV文件。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>LEDE/OpenWrt路由器使用Adblock屏蔽小米广告</title>
    <link href="https://blog.crazylinux.cc/post/2018/lede-adblock-admi/"/>
    <id>https://blog.crazylinux.cc/post/2018/lede-adblock-admi/</id>
    <published>2018-07-13T10:52:46.000Z</published>
    <updated>2020-07-16T13:30:15.168Z</updated>
    
    <content type="html"><![CDATA[<p>小米的生态链产品做的不错，但无奈小米手机上的广告太多，实在无法忍受，有网友推出了<code>小米净化APP</code>用于屏蔽小米的广告，本文介绍如何在<code>LEDE/OpenWrt</code>路由器使用<code>Adblock</code>插件屏蔽小米烦人的广告。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>刷了<code>LEDE/OpenWrt</code>的路由器</li><li>小米手机</li><li>网络</li></ul><h3 id="1、远程登录到路由器后台"><a href="#1、远程登录到路由器后台" class="headerlink" title="1、远程登录到路由器后台"></a>1、远程登录到路由器后台</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.31.1  <span class="comment">#改为自己的IP</span></span><br><span class="line">BusyBox v1.25.1 () built-in shell (ash)</span><br><span class="line"></span><br><span class="line">     _________</span><br><span class="line">    /        /\      _    ___ ___  ___</span><br><span class="line">   /  LE    /  \    | |  | __|   \| __|</span><br><span class="line">  /    DE  /    \   | |__| _|| |) | _|</span><br><span class="line"> /________/  LE  \  |____|___|___/|___|         lede-project.org</span><br><span class="line"> \        \   DE /</span><br><span class="line">  \    LE  \    /  ----------------------------------------------</span><br><span class="line">   \  DE    \  /    Reboot (17.01.4, r3560-79f57e422d)</span><br><span class="line">    \________\/    ----------------------------------------------</span><br><span class="line"></span><br><span class="line">root@HiWiFi:~<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="2、安装中文支持包"><a href="#2、安装中文支持包" class="headerlink" title="2、安装中文支持包"></a>2、安装中文支持包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@HiWiFi:~<span class="comment"># opkg update</span></span><br><span class="line">root@HiWiFi:~<span class="comment"># opkg install luci-i18n-base-zh-cn</span></span><br></pre></td></tr></table></figure><h3 id="3、安装Adblock插件"><a href="#3、安装Adblock插件" class="headerlink" title="3、安装Adblock插件"></a>3、安装Adblock插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@HiWiFi:~<span class="comment"># opkg install adblock luci-app-adblock </span></span><br><span class="line">root@HiWiFi:~<span class="comment"># opkg install luci-i18n-adblock-zh-cn</span></span><br></pre></td></tr></table></figure><h3 id="4、设置"><a href="#4、设置" class="headerlink" title="4、设置"></a>4、设置</h3><p>在<code>WebUI</code>管理界面设置<code>Adblock</code>的黑名单，加入如下的域名<br>依次点击：服务—&gt;Adblock—&gt;高级—&gt;编辑黑名单</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">a.stat.xiaomi.com</span><br><span class="line">a.union.mi.com</span><br><span class="line">abtest.mistat.xiaomi.com</span><br><span class="line">adinfo.ra1.xlmc.sec.miui.com</span><br><span class="line">adv.sec.miui.com</span><br><span class="line">api.ad.xiaomi.com</span><br><span class="line">api.ra2.xlmc.sec.miui.com</span><br><span class="line">api.tuisong.baidu.com</span><br><span class="line">api.tw06.xlmc.sec.miui.com</span><br><span class="line">app01.nodes.gslb.mi-idc.com</span><br><span class="line">app02.nodes.gslb.mi-idc.com</span><br><span class="line">app03.nodes.gslb.mi-idc.com</span><br><span class="line">applog.uc.cn</span><br><span class="line">beha.ksmobile.com</span><br><span class="line">bss.pandora.xiaomi.com</span><br><span class="line">calopenupdate.comm.miui.com</span><br><span class="line">cdn.ad.xiaomi.com</span><br><span class="line">cm.p4p.cn.yahoo.com</span><br><span class="line">cm066.getui.igexin.com</span><br><span class="line">connect.rom.miui.com</span><br><span class="line">data.mistat.xiaomi.com</span><br><span class="line">e.ad.xiaomi.com</span><br><span class="line">etl.xlmc.sandai.net</span><br><span class="line">fcanr.tracking.miui.com</span><br><span class="line">fclick.baidu.com</span><br><span class="line">get.sogou.com</span><br><span class="line">hm.xiaomi.com</span><br><span class="line">hub5pn.wap.sandai.net</span><br><span class="line">idx.m.hub.sandai.net</span><br><span class="line">image.box.xiaomi.com</span><br><span class="line">info.analysis.kp.sec.miui.com</span><br><span class="line">info.sec.miui.com</span><br><span class="line">logupdate.avlyun.sec.miui.com</span><br><span class="line">m.bss.pandora.xiaomi.com</span><br><span class="line">m.irs01.com</span><br><span class="line">m.sjzhushou.com</span><br><span class="line">master.wap.dphub.sandai.net</span><br><span class="line">mdap.alipaylog.com</span><br><span class="line">migc.g.mi.com</span><br><span class="line">migcreport.g.mi.com</span><br><span class="line">migrate.driveapi.micloud.xiaomi.net</span><br><span class="line">mis.g.mi.com</span><br><span class="line">mlog.search.xiaomi.net</span><br><span class="line">new.api.ad.xiaomi.com</span><br><span class="line">notice.game.xiaomi.com</span><br><span class="line">nsclick.baidu.com</span><br><span class="line">o2o.api.xiaomi.com</span><br><span class="line">p.alimama.com</span><br><span class="line">pdc.micloud.xiaomi.net</span><br><span class="line">ppurifier.game.xiaomi.com</span><br><span class="line">pre.api.tw06.xlmc.sandai.net</span><br><span class="line">r.browser.miui.com</span><br><span class="line">reader.browser.miui.com</span><br><span class="line">report.adview.cn</span><br><span class="line">resolver.gslb.mi-idc.com</span><br><span class="line">resolver.msg.xiaomi.net</span><br><span class="line">sa.tuisong.baidu.com</span><br><span class="line">sa3.tuisong.baidu.com</span><br><span class="line">sdk.open.phone.igexin.com</span><br><span class="line">sdk.open.talk.gepush.com</span><br><span class="line">sdk.open.talk.igexin.com</span><br><span class="line">sdkconfig.ad.xiaomi.com</span><br><span class="line">sec-cdn.static.xiaomi.net</span><br><span class="line">sec.resource.xiaomi.net</span><br><span class="line">security.browser.miui.com</span><br><span class="line">sg.a.stat.mi.com</span><br><span class="line">staging.admin.e.mi.com</span><br><span class="line">test.ad.xiaomi.com</span><br><span class="line">test.api.xlmc.sandai.net</span><br><span class="line">test.e.ad.xiaomi.com</span><br><span class="line">test.new.api.ad.xiaomi.com</span><br><span class="line">tracking.miui.com</span><br><span class="line">tw13b093.sandai.net</span><br><span class="line">union.dbba.cn</span><br><span class="line">update.avlyun.sec.miui.com</span><br><span class="line">www.adview.cn</span><br><span class="line">yun.rili.cn</span><br><span class="line">zhwnlapi.etouch.cn</span><br><span class="line">api.comm.miui.com</span><br></pre></td></tr></table></figure><p>备注：以上域名引自小米净化APP</p><h3 id="5、注意事项"><a href="#5、注意事项" class="headerlink" title="5、注意事项"></a>5、注意事项</h3><p>Adblock的配置的<code>Download Utility</code>最好选择<code>uclient-fetch</code>,并且安装SSL库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@HiWiFi:~<span class="comment"># opkg install libustream-openssl</span></span><br></pre></td></tr></table></figure><p><img src="/images/adblocka.png" alt="ad"><br>拦截来源列表里推荐勾选上<code>reg_cn</code>，对国内的广告拦截效果较好。</p><h3 id="6、重启小米路由器"><a href="#6、重启小米路由器" class="headerlink" title="6、重启小米路由器"></a>6、重启小米路由器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@HiWiFi:~<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><p>此时再打开小米的APP，如：<code>小米路由器</code>就发现启动时的广告没了，清爽的感觉又回来了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小米的生态链产品做的不错，但无奈小米手机上的广告太多，实在无法忍受，有网友推出了&lt;code&gt;小米净化APP&lt;/code&gt;用于屏蔽小米的广告，本文介绍如何在&lt;code&gt;LEDE/OpenWrt&lt;/code&gt;路由器使用&lt;code&gt;Adblock&lt;/code&gt;插件屏蔽小米烦人的广告。&lt;/p&gt;</summary>
    
    
    
    <category term="OpenWrt" scheme="https://blog.crazylinux.cc/categories/openwrt/"/>
    
    
    <category term="OpenWrt" scheme="https://blog.crazylinux.cc/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>更新CentOS7.4到CentOS7.5</title>
    <link href="https://blog.crazylinux.cc/post/2018/centos7-upgrade/"/>
    <id>https://blog.crazylinux.cc/post/2018/centos7-upgrade/</id>
    <published>2018-05-14T16:31:15.000Z</published>
    <updated>2020-07-16T13:30:15.068Z</updated>
    
    <content type="html"><![CDATA[<p>2018年5月15日，CentOS官方发布了最新的CentOS7.5（1804）系统，加入了一些新的特性，下面介绍如何更新系统到最新的CentOS7.5。</p><a id="more"></a><h3 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h3><h4 id="1、查看当前的系统版本"><a href="#1、查看当前的系统版本" class="headerlink" title="1、查看当前的系统版本"></a>1、查看当前的系统版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure><h4 id="2、更新系统"><a href="#2、更新系统" class="headerlink" title="2、更新系统"></a>2、更新系统</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum clean all</span><br><span class="line">$ sudo yum upgrade</span><br><span class="line">$ sudo systemctl reboot</span><br></pre></td></tr></table></figure><h4 id="3、查看新的系统版本"><a href="#3、查看新的系统版本" class="headerlink" title="3、查看新的系统版本"></a>3、查看新的系统版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1、<a href="https://blog.centos.org/2018/05/centos-7-5-1804-released/">官方博客</a><br>2、<a href="https://opsx.alibaba.com/mirror">下载地址</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2018年5月15日，CentOS官方发布了最新的CentOS7.5（1804）系统，加入了一些新的特性，下面介绍如何更新系统到最新的CentOS7.5。&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/categories/centos/"/>
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置 dnscrypt-proxy</title>
    <link href="https://blog.crazylinux.cc/post/2018/rpi-dnscrypt-proxy/"/>
    <id>https://blog.crazylinux.cc/post/2018/rpi-dnscrypt-proxy/</id>
    <published>2018-02-18T14:49:58.000Z</published>
    <updated>2020-07-16T13:30:15.449Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/dnscrypt.png" alt="dnscrypt"><br><code>dnscrypt-proxy</code>可防止DNS污染，最新的2.0.x版本增加缓存DNS功能，加快DNS解析速度。</p><a id="more"></a><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/jedisct1/dnscrypt-proxy/releases/download/2.0.44/dnscrypt-proxy-linux_arm-2.0.44.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf dnscrypt-proxy-linux_arm-2.0.44.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv linux-arm dnscrypt</span></span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mv example-dnscrypt-proxy.toml dnscrypt-proxy.toml</span><br><span class="line">$ vim dnscrypt-proxy.toml</span><br><span class="line">server_names = [<span class="string">&#x27;rubyfish-ea&#x27;</span>, <span class="string">&#x27;alidns-doh&#x27;</span>, <span class="string">&#x27;cloudflare&#x27;</span>]</span><br><span class="line">listen_addresses = [<span class="string">&#x27;127.0.0.1:53&#x27;</span>, <span class="string">&#x27;[172.16.10.10]:53&#x27;</span>]</span><br><span class="line">log_file = <span class="string">&#x27;dnscrypt-proxy.log&#x27;</span></span><br><span class="line">fallback_resolver = <span class="string">&#x27;208.67.222.222:53&#x27;</span></span><br><span class="line">cache = <span class="literal">true</span></span><br><span class="line">cache_size = 15000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>把上面的<code>172.16.10.10</code>改为树莓派局域网内的IP地址。<code>server_names</code>会自动选择一个最快的使用，我的测试了<code>alidns-doh</code>[阿里服务器]延迟较低。<code>极客DNS</code>和<code>红鱼DNS</code>是中国大陆的服务器，其它一些高级的功能可根据自己的需要更改。</p><p>eg.</p><ul><li>自定义域名解析</li><li>域名黑名单</li><li>过滤广告</li></ul><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /usr/<span class="built_in">local</span>/dnscrypt/dnscrypt-proxy -service install</span></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnscrypt-proxy -service start</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  使用systemctl管理服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start dnscrypt-proxy.service</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnscrypt-proxy -service stop</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dnscrypt-proxy -service restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dnscrypt-proxy -service uninstall</span></span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>网络配置里修改DNS配置为树莓派的IP地址。便可以使用本地的DNS解析。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/jedisct1/dnscrypt-proxy/wiki">dnscrypt wiki</a><br><a href="https://github.com/DNSCrypt/dnscrypt-proxy.git">dnscrypt-proxy</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/dnscrypt.png&quot; alt=&quot;dnscrypt&quot;&gt;&lt;br&gt;&lt;code&gt;dnscrypt-proxy&lt;/code&gt;可防止DNS污染，最新的2.0.x版本增加缓存DNS功能，加快DNS解析速度。&lt;/p&gt;</summary>
    
    
    
    <category term="RaspberryPi" scheme="https://blog.crazylinux.cc/categories/raspberrypi/"/>
    
    
    <category term="RaspberryPi" scheme="https://blog.crazylinux.cc/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>HAProxy实现负载均衡</title>
    <link href="https://blog.crazylinux.cc/post/2018/haproxy-load-balancing/"/>
    <id>https://blog.crazylinux.cc/post/2018/haproxy-load-balancing/</id>
    <published>2018-02-01T06:07:27.000Z</published>
    <updated>2021-01-19T04:02:23.148Z</updated>
    
    <content type="html"><![CDATA[<p>当随着访问量的增加时，原来的单台服务器难以承受大量的访问时，就需要使用负载均衡来分担服务器的压力。本文介绍使用<code>HAProxy</code>实现一个免费、高效、可靠的高可用负载均衡解决方案。</p><a id="more"></a><h3 id="HAProxy简介"><a href="#HAProxy简介" class="headerlink" title="HAProxy简介"></a>HAProxy简介</h3><p>HAProxy是免费、高效、可靠的高可用负载均衡解决方案。适合处理高负载站点的七层数据请求，对外可屏蔽内部的真实Web服务器，防止内部服务器遭受外部攻击。</p><h3 id="HAProxy解决方案"><a href="#HAProxy解决方案" class="headerlink" title="HAProxy解决方案"></a>HAProxy解决方案</h3><ul><li>客户端IP：将客户端IP进行Hash计算并保存，当相同的IP访问代理服务器时可以转发至相同的后端服务器；</li><li>Cookie：依靠真实服务器发送给客户端的Cookie信息进行会话保持；</li><li>Session：保存真实服务器的Session及服务标识，实现会话保持功能；</li></ul><h3 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h3><p><img src="https://pengshp.coding.net/p/images/d/images/git/raw/master/blog-haproxy2.png" alt="blog-haproxy2"></p><h3 id="实验配置"><a href="#实验配置" class="headerlink" title="实验配置"></a>实验配置</h3><h4 id="HAProxy配置"><a href="#HAProxy配置" class="headerlink" title="HAProxy配置"></a>HAProxy配置</h4><p>1、安装HAProxy</p><pre><code>$ yum install -y haproxy</code></pre><p>2、修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ [root@CentOS7] ~$ vim /etc/haproxy/haproxy.cfg</span><br><span class="line">global</span><br><span class="line">    <span class="built_in">log</span>         127.0.0.1 local2</span><br><span class="line"></span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">    <span class="comment"># turn on stats unix socket</span></span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">frontend haproxy_inbound</span><br><span class="line">    <span class="built_in">bind</span> *:80</span><br><span class="line">    default_backend haproxy_httpd</span><br><span class="line"></span><br><span class="line">backend haproxy_httpd</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    option httpchk GET /index.html  <span class="comment"># 健康检查</span></span><br><span class="line">    server web1 192.168.10.129:80 check</span><br><span class="line">    server web2 192.168.10.130:80 check</span><br></pre></td></tr></table></figure><p>3、内核优化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line">*               soft    nofile        65535</span><br><span class="line">*               hard    nofile        65535</span><br></pre></td></tr></table></figure><p>4、开启日志服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改日志配置文件</span></span><br><span class="line">$ vim /etc/rsyslog.conf</span><br><span class="line"><span class="variable">$ModLoad</span> imudp</span><br><span class="line"><span class="variable">$UDPServerRun</span> 514</span><br><span class="line">local3.*                           /var/<span class="built_in">log</span>/haproxy.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启日志服务</span></span><br><span class="line">$ systemctl restart syslog</span><br></pre></td></tr></table></figure><p>5、开启HAProxy</p><pre><code>$ haproxy -f /etc/haproxy/haproxy.cfg</code></pre><h4 id="后端Web服务器配置"><a href="#后端Web服务器配置" class="headerlink" title="后端Web服务器配置"></a>后端Web服务器配置</h4><p>后端服务器配置基本相同，为了验证试验效果，后端网页不同<br>1、配置网卡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-ens33554984</span><br><span class="line">NAME=ens33554984</span><br><span class="line">BOOTPROTO=<span class="string">&#x27;static&#x27;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=192.168.10.129</span><br><span class="line">GATEWAY=192.168.10.128  <span class="comment">#网关指向HAProxy的内网IP</span></span><br><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"></span><br><span class="line">$ systemctl restart network</span><br></pre></td></tr></table></figure><p>2、Apache配置<br>网页文件做修改，其他配置相同</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7] ~$ yum install -y httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web-1</span></span><br><span class="line">[root@CentOS7] ~$ <span class="built_in">echo</span> <span class="string">&quot;This is Web-1&quot;</span> &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web-2</span></span><br><span class="line">[root@CentOS7] ~$ <span class="built_in">echo</span> <span class="string">&quot;This is Web-2&quot;</span> &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">[root@CentOS7] ~$ systemctl start httpd</span><br><span class="line">[root@CentOS7] ~$ systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>重启HAProxy</p><pre><code>$ systemctl restart haproxy.service   </code></pre><p>浏览器打开 <a href="http://192.168.10.128/">http://192.168.10.128</a>,刷新网页，便可以看到在<code>Web-1</code>和<code>Web-2</code>之间轮询。实现一个负载均衡。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当随着访问量的增加时，原来的单台服务器难以承受大量的访问时，就需要使用负载均衡来分担服务器的压力。本文介绍使用&lt;code&gt;HAProxy&lt;/code&gt;实现一个免费、高效、可靠的高可用负载均衡解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/categories/centos/"/>
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Web 缓存代理服务器polipo</title>
    <link href="https://blog.crazylinux.cc/post/2018/web-cache-proxy-polipo/"/>
    <id>https://blog.crazylinux.cc/post/2018/web-cache-proxy-polipo/</id>
    <published>2018-01-31T15:21:20.000Z</published>
    <updated>2020-07-16T13:30:15.551Z</updated>
    
    <content type="html"><![CDATA[<p>Polipo 是一个小而快速的缓存web 代理程序(web 缓存, HTTP 代理, 代理服务器)。可以实现HTTP和SOCKS代理。为了最小化延迟，Polipo管线化多个资源请求，在同一个TCP/IP连接上多路复用。Polipo具有HTTP 1.1兼容，支持IPv4、IPv6，流量过滤和隐私增强。</p><a id="more"></a><p>测试环境：CentOS7</p><h3 id="下载编译安装"><a href="#下载编译安装" class="headerlink" title="下载编译安装"></a>下载编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">$ wget https://github.com/jech/polipo/archive/polipo-1.1.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar -zxf polipo-1.1.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ yum install texinfo gcc make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ <span class="built_in">cd</span> polipo-polipo-1.1.1/</span><br><span class="line">$ make all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ su -c <span class="string">&#x27;make install&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="创建相关的配置文件"><a href="#创建相关的配置文件" class="headerlink" title="创建相关的配置文件"></a>创建相关的配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建日志文件</span></span><br><span class="line">$ mkdir /var/<span class="built_in">log</span>/polipo</span><br><span class="line">$ touch /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line">$ mkdir /etc/polipo</span><br></pre></td></tr></table></figure><h3 id="新建服务启动文件"><a href="#新建服务启动文件" class="headerlink" title="新建服务启动文件"></a>新建服务启动文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/polipo.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=polipo web proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/tmp</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/polipo -c /etc/polipo/config</span><br><span class="line">Restart=always</span><br><span class="line">SyslogIdentifier=Polipo</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="创建服务配置文件"><a href="#创建服务配置文件" class="headerlink" title="创建服务配置文件"></a>创建服务配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/polipo/config</span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">socksParentProxy = <span class="string">&quot;localhost:1080&quot;</span> <span class="comment">#上层Socks5代理</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line">logLevel = 4</span><br><span class="line">proxyAddress = <span class="string">&quot;0.0.0.0&quot;</span> <span class="comment">#监听IP</span></span><br><span class="line">proxyPort = 8123</span><br><span class="line">allowedClients = 192.168.10.0/24 <span class="comment">#允许连接的客户端</span></span><br><span class="line">chunkHighMark = 50331648 <span class="comment">#使用的较多的内存</span></span><br><span class="line">objectHighMark = 16384</span><br><span class="line">diskCacheRoot = <span class="string">&quot;/var/cache/polipo&quot;</span> <span class="comment">#缓存文件存储目录</span></span><br><span class="line">cacheIsShared = <span class="literal">true</span> <span class="comment">#分享缓存</span></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line">dnsQueryIPv6 = no <span class="comment">#不适用IPv6，加快DNS查询速度</span></span><br><span class="line">dnsUseGethostbyname = yes <span class="comment">#使用系统的resolver</span></span><br></pre></td></tr></table></figure><h3 id="启动代理服务"><a href="#启动代理服务" class="headerlink" title="启动代理服务"></a>启动代理服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start polipo.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> polipo.service</span></span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>把浏览器的代理配置为<code>polipo</code>服务器的IP地址，端口为8123，便可以使用<code>polipo</code>代理上网，加快网页的访问速度。</p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>如果实在树莓派上使用，可直接使用apt安装，并复制配置文件直接修改配置,可直接使用<code>systemctl</code>管理服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /usr/share/doc/polipo/examples/config.sample /etc/polipo/config</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Polipo 是一个小而快速的缓存web 代理程序(web 缓存, HTTP 代理, 代理服务器)。可以实现HTTP和SOCKS代理。为了最小化延迟，Polipo管线化多个资源请求，在同一个TCP/IP连接上多路复用。Polipo具有HTTP 1.1兼容，支持IPv4、IPv6，流量过滤和隐私增强。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透服务Frp</title>
    <link href="https://blog.crazylinux.cc/post/2018/intranet-penetration-frp/"/>
    <id>https://blog.crazylinux.cc/post/2018/intranet-penetration-frp/</id>
    <published>2018-01-31T06:31:40.000Z</published>
    <updated>2020-07-16T13:30:15.147Z</updated>
    
    <content type="html"><![CDATA[<p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。当想从公网环境访问家里或公司局域网内的服务器时便可以使用frp搭建内网穿透服务实现此功能。</p><a id="more"></a><h3 id="1、原理介绍"><a href="#1、原理介绍" class="headerlink" title="1、原理介绍"></a>1、原理介绍</h3><p>Frp是<code>C/S</code>架构，在具有公网IP的服务器上搭建Frp的服务端，在本地局域网搭建Frp客户端；Frp通过将局域网内的IP端口映射到公网IP的某个端口上，当我们访问公网IP的这个端口时，相当于访问了其映射的局域网内的 IP:Port </p><h3 id="2、服务条件"><a href="#2、服务条件" class="headerlink" title="2、服务条件"></a>2、服务条件</h3><ul><li>具有公网IP的服务器</li><li>客户端和服务端使用相同或相近的版本</li></ul><h3 id="3、服务端搭建"><a href="#3、服务端搭建" class="headerlink" title="3、服务端搭建"></a>3、服务端搭建</h3><p>下载对应系统的最新的程序<a href="https://github.com/fatedier/frp/releases">frp</a> 解压缩，进入解压目录<br>修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">bind_udp_port = 7001</span><br><span class="line">kcp_bind_port = 7000</span><br><span class="line"></span><br><span class="line">dashboard_port = 7500</span><br><span class="line"><span class="comment"># dashboard 用户名密码，默认都为 admin</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">vhost_http_port = 80</span><br><span class="line"></span><br><span class="line">token = xxxx <span class="comment">#自定义</span></span><br><span class="line">max_pool_count = 5</span><br><span class="line">max_ports_per_client = 0 </span><br><span class="line">authentication_timeout = 900</span><br><span class="line">subdomain_host = xxxxx.com</span><br><span class="line">tcp_mux = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动Frp服务端</p><pre><code>$ nohup ./frps -c ./frps.ini &amp;</code></pre><h3 id="4、客户端搭建"><a href="#4、客户端搭建" class="headerlink" title="4、客户端搭建"></a>4、客户端搭建</h3><p>下载相同的程序<br>修改配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x   <span class="comment">#公网IP地址</span></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">log_file = /usr/<span class="built_in">local</span>/frp/frpc.log</span><br><span class="line"><span class="comment"># trace, debug, info, warn, error</span></span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line">token = xxxxxx <span class="comment">#修改</span></span><br><span class="line">pool_count = 5</span><br><span class="line">tcp_mux = <span class="literal">true</span></span><br><span class="line">user = pi</span><br><span class="line">login_fail_exit = <span class="literal">true</span></span><br><span class="line">protocol = tcp</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line">[gogs]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_ip = 172.16.10.80</span><br><span class="line">local_port = 3000</span><br><span class="line">use_encryption = <span class="literal">true</span></span><br><span class="line">use_compression = <span class="literal">false</span></span><br><span class="line">subdomain = gogs</span><br><span class="line"><span class="comment">#custom_domains = gogs.xxxx.com</span></span><br></pre></td></tr></table></figure><p>启动本地客户端</p><pre><code>$ nohup ./frpc -c ./frpc.ini &amp;</code></pre><p>ssh连接局域网内的服务器</p><pre><code>$ ssh -oPort=6000 root@x.x.x.x</code></pre><p>也可在局域网搭建能够被公网访问的Web服务器，开启80或443端口，更多高级的配置请参考下面的文档。</p><h3 id="5-systemctl管理frpc服务"><a href="#5-systemctl管理frpc服务" class="headerlink" title="5.systemctl管理frpc服务"></a>5.systemctl管理frpc服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/frpc.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=frpc daemon</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frpc -c /usr/<span class="built_in">local</span>/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>服务端同理，把<code>frpc</code>改为<code>frps</code></p><h3 id="5、参考文档"><a href="#5、参考文档" class="headerlink" title="5、参考文档"></a>5、参考文档</h3><p>1、<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">Frp说明文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。当想从公网环境访问家里或公司局域网内的服务器时便可以使用frp搭建内网穿透服务实现此功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/categories/linux/"/>
    
    
    <category term="Linux" scheme="https://blog.crazylinux.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 时间同步</title>
    <link href="https://blog.crazylinux.cc/post/2018/centos-ntpdate/"/>
    <id>https://blog.crazylinux.cc/post/2018/centos-ntpdate/</id>
    <published>2018-01-31T05:49:41.000Z</published>
    <updated>2021-01-19T03:46:24.262Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中很多服务需要进行时间同步，不然容易导致出错。本文介绍使用阿里云的时间服务器同步服务器的时间。</p><a id="more"></a><h3 id="1、安装软件"><a href="#1、安装软件" class="headerlink" title="1、安装软件"></a>1、安装软件</h3><pre><code>$ yum install -y ntpdate</code></pre><h3 id="2、时间同步服务器"><a href="#2、时间同步服务器" class="headerlink" title="2、时间同步服务器"></a>2、时间同步服务器</h3><p>可用的时间同步服务器，阿里提供了一些NTP时间服务器可以用于从互联网中同步服务器的时间；</p><blockquote><p>ntp1.aliyun.com<br>  ntp2.aliyun.com<br>  ntp3.aliyun.com<br>  ntp4.aliyun.com<br>  ntp5.aliyun.com<br>  ntp6.aliyun.com<br>  ntp7.aliyun.com</p></blockquote><h3 id="3、同步时间"><a href="#3、同步时间" class="headerlink" title="3、同步时间"></a>3、同步时间</h3><p>从上面的时间同步服务器中选择一个进行时间同步。</p><pre><code>$ ntpdate -u ntp1.aliyun.com</code></pre><h3 id="4、加入计划任务"><a href="#4、加入计划任务" class="headerlink" title="4、加入计划任务"></a>4、加入计划任务</h3><p>可以把时间同步加入系统的计划任务，定时从互联网同步时间</p><pre><code>$ crontab -e* */2 * * * ntpdate -u ntp1.aliyun.com &amp;&gt; /dev/null# 每两个小时同步一次时间$ systemctl start crond$ systemctl enable crond</code></pre><p>​    </p><h2 id="使用chrony同步时间"><a href="#使用chrony同步时间" class="headerlink" title="使用chrony同步时间"></a>使用chrony同步时间</h2><h3 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xdl@CentOS] ~$ sudo vim /etc/chrony.conf</span><br><span class="line">pool ntp1.aliyun.com iburst</span><br></pre></td></tr></table></figure><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xdl@CentOS] ~$ sudo systemctl enable --now chronyd.service</span><br></pre></td></tr></table></figure><h3 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3. 查看状态"></a>3. 查看状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[xdl@CentOS] ~$ chronyc sources -v</span><br><span class="line">210 Number of sources = 1</span><br><span class="line">MS Name/IP address         Stratum Poll Reach LastRx Last sample</span><br><span class="line">===============================================================================</span><br><span class="line">^* 120.25.115.20                 2   6    37    64   -285us[-4209us] +/-   12ms</span><br></pre></td></tr></table></figure><p>推荐使用 <code>chrony</code>进行时间同步。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux中很多服务需要进行时间同步，不然容易导致出错。本文介绍使用阿里云的时间服务器同步服务器的时间。&lt;/p&gt;</summary>
    
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/categories/centos/"/>
    
    
    <category term="CentOS" scheme="https://blog.crazylinux.cc/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Pipenv 使用指南</title>
    <link href="https://blog.crazylinux.cc/post/2018/pipenv-guide/"/>
    <id>https://blog.crazylinux.cc/post/2018/pipenv-guide/</id>
    <published>2018-01-04T02:42:55.000Z</published>
    <updated>2020-07-16T13:30:15.266Z</updated>
    
    <content type="html"><![CDATA[<p>pipenv是requests作者的一个项目, 整合了virtualenv, pip的优点，用于更方便地为项目建立虚拟环境并管理虚拟环境中的第三方模块。后来这个项目交给Python基金会维护。</p><a id="more"></a><p>为什么要使用Pipenv？：</p><ul><li>自动关联项目相关的 virtualenv，能够快速的加载 virtualenv。</li><li>提供的 pipenv替代 pip并自带一个依赖清单 Pipfile，和依赖锁定 Pipfile.lock。</li><li>其中 Pipfile除了依赖清单还支持固定 pypi源地址,固定 python版本。</li><li>Pipfile还支持 dev依赖清单. pipenv install的包会强制使用 Pipfile中的源.</li><li>解决了 pip install pandas时里的 numpy依旧走官方 pypi.<br>还有就是可以直接切换 python2,3</li><li>使用 pipenv graph命令可以看到依赖树</li></ul><h4 id="1、安装Pipenv"><a href="#1、安装Pipenv" class="headerlink" title="1、安装Pipenv"></a>1、安装Pipenv</h4><pre><code>pip3 install pipenv</code></pre><h4 id="2、创建虚拟环境"><a href="#2、创建虚拟环境" class="headerlink" title="2、创建虚拟环境"></a>2、创建虚拟环境</h4><p>pipenv管理虚拟环境是按项目来的, 要为你的某个项目新建一个虚拟环境, 只需要在项目目录下运行如下命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建Python2 的虚拟环境</span></span><br><span class="line">pipenv --two</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建Python3 的虚拟环境</span></span><br><span class="line">pipenv --three</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换豆瓣的pipy源</span></span><br><span class="line">sed -i s/pypi.python.org/pypi.doubanio.com/g Pipfile</span><br></pre></td></tr></table></figure><p>该命令会在项目目录下生成一个<code>Pipfile</code>的文件，用于记录虚拟环境的信息及第三方依赖的信息。</p><h4 id="3、安装第三方模块"><a href="#3、安装第三方模块" class="headerlink" title="3、安装第三方模块"></a>3、安装第三方模块</h4><p>pipenv可以自动安装你项目的第三方模块 :</p><pre><code>pipenv install</code></pre><p>安装列表是通过读取<code>pipfile</code>, <code>pipfile.lock</code>文件实现的, 如果没有这两个文件就根据<code>requirements.txt</code>生成<code>pipfile</code>和<code>pipfile.lock</code>并读取.<br>如果想单独安装某个模块还可以指定模块名安装:</p><pre><code>pipenv install sanic</code></pre><p>单独安装模块后会自动将新模块信息添加到pipfile中, 要同时更新pipfile.lock需要运行:</p><pre><code>pipenv lock</code></pre><h4 id="4、进入虚拟环境"><a href="#4、进入虚拟环境" class="headerlink" title="4、进入虚拟环境"></a>4、进入虚拟环境</h4><pre><code># 进入虚拟环境pipenv shell# 退出exit</code></pre><p>还有一个 <code>pipenv run</code>的可以直接执行 <code>virtualenv</code>环境下的命令。</p><h4 id="5、基本命令"><a href="#5、基本命令" class="headerlink" title="5、基本命令"></a>5、基本命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line">Options:</span><br><span class="line">  --update         升级 pipenv, pip 到最新.</span><br><span class="line">  --<span class="built_in">where</span>          输出项目的目录信息.</span><br><span class="line">  --venv           输出 virtualenv 的目录信息.</span><br><span class="line">  --py             输出 Python 解析器的路径.</span><br><span class="line">  --envs           输出环境变量的设置.</span><br><span class="line">  --rm             删除当前 virtualenv.</span><br><span class="line">  --bare           Minimal output.</span><br><span class="line">  --completion     Output completion (to be evald).</span><br><span class="line">  --man            显示使用手册.</span><br><span class="line">  --three / --two  使用 Python 3/2 来创建 virtualenv</span><br><span class="line">  --python TEXT    直接指定 Python 解析器.</span><br><span class="line">  --site-packages  拷贝系统 site-packages 到 virtualenv.</span><br><span class="line">  --jumbotron      An easter egg, effectively.</span><br><span class="line">  --version        显示版本信息并退出.</span><br><span class="line">  -h, --<span class="built_in">help</span>       显示当前信息并退出.</span><br><span class="line">Commands:</span><br><span class="line">  check      检查安全漏洞和反对 PEP 508 标记在Pipfile提供.</span><br><span class="line">  graph      显示当前依赖关系图信息.</span><br><span class="line">  install    安装提供的包，并加入 Pipfile 的依赖清单中</span><br><span class="line">  lock       生成 Pipfile.lock.</span><br><span class="line">  open       在编辑器(vim)查看一个特定模块.</span><br><span class="line">  run        在 virtualenv 中执行命令.</span><br><span class="line">  shell      切换到 virtualenv 中.</span><br><span class="line">  uninstall  删除提供的包，并清理 Pipfile 的依赖清单中.</span><br><span class="line">  update     卸载当前所以依赖，然后安装最新包</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;pipenv是requests作者的一个项目, 整合了virtualenv, pip的优点，用于更方便地为项目建立虚拟环境并管理虚拟环境中的第三方模块。后来这个项目交给Python基金会维护。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.crazylinux.cc/tags/python/"/>
    
  </entry>
  
</feed>
